{"version":3,"sources":["../src/replaceJsxExpressionContainer.js"],"names":["t","path","styleNameAttribute","importedHelperIndentifier","styleModuleImportMapIdentifier","options","expressionContainerValue","value","classNameAttribute","node","openingElement","attributes","find","attribute","name","splice","indexOf","args","expression","handleMissingStyleName","push","styleNameExpression","callExpression","stringLiteral","Error"],"mappings":";;;;;;AACA;;;;AAaA;;;;AACA;;;;AACA;;;;;;kBAMe,CACbA,CADa,EAGbC,IAHa,EAIbC,kBAJa,EAKbC,yBALa,EAMbC,8BANa,EAObC,OAPa,KAQJ;AACT,QAAMC,2BAA2BJ,mBAAmBK,KAApD;AACA,QAAMC,qBAAqBP,KAAKQ,IAAL,CAAUC,cAAV,CAAyBC,UAAzB,CACxBC,IADwB,CAClBC,SAAD,IAAe;AACnB,WAAO,OAAOA,UAAUC,IAAjB,KAA0B,WAA1B,IAAyCD,UAAUC,IAAV,CAAeA,IAAf,KAAwB,WAAxE;AACD,GAHwB,CAA3B;;AAKA,MAAIN,kBAAJ,EAAwB;AACtBP,SAAKQ,IAAL,CAAUC,cAAV,CAAyBC,UAAzB,CAAoCI,MAApC,CAA2Cd,KAAKQ,IAAL,CAAUC,cAAV,CAAyBC,UAAzB,CAAoCK,OAApC,CAA4CR,kBAA5C,CAA3C,EAA4G,CAA5G;AACD;;AAEDP,OAAKQ,IAAL,CAAUC,cAAV,CAAyBC,UAAzB,CAAoCI,MAApC,CAA2Cd,KAAKQ,IAAL,CAAUC,cAAV,CAAyBC,UAAzB,CAAoCK,OAApC,CAA4Cd,kBAA5C,CAA3C,EAA4G,CAA5G;;AAEA,QAAMe,OAAO,CACXX,yBAAyBY,UADd,EAEXd,8BAFW,CAAb;;AAKA;AACA;AACA,MAAIC,QAAQc,sBAAR,KAAmC,0BAAgBA,sBAAvD,EAA+E;AAC7EF,SAAKG,IAAL,CAAU,sCAAuBpB,CAAvB,EAA0BK,OAA1B,CAAV;AACD;;AAED,QAAMgB,sBAAsBrB,EAAEsB,cAAF,CAC1BnB,yBAD0B,EAE1Bc,IAF0B,CAA5B;;AAKA,MAAIT,kBAAJ,EAAwB;AACtB,QAAI,iCAAgBA,mBAAmBD,KAAnC,CAAJ,EAA+C;AAC7CN,WAAKQ,IAAL,CAAUC,cAAV,CAAyBC,UAAzB,CAAoCS,IAApC,CAAyC,8BACvC,+BAAc,WAAd,CADuC,EAEvC,wCACE,kCACE,GADF,EAEEpB,EAAEuB,aAAF,CAAgBf,mBAAmBD,KAAnB,CAAyBA,KAAzB,GAAiC,GAAjD,CAFF,EAGEc,mBAHF,CADF,CAFuC,CAAzC;AAUD,KAXD,MAWO,IAAI,0CAAyBb,mBAAmBD,KAA5C,CAAJ,EAAwD;AAC7DN,WAAKQ,IAAL,CAAUC,cAAV,CAAyBC,UAAzB,CAAoCS,IAApC,CAAyC,8BACvC,+BAAc,WAAd,CADuC,EAEvC,wCACE,qCACEZ,mBAAmBD,KAAnB,CAAyBW,UAD3B,EAEEG,mBAFF,CADF,CAFuC,CAAzC;AASD,KAVM,MAUA;AACL,YAAM,IAAIG,KAAJ,CAAU,6BAAV,CAAN;AACD;AACF,GAzBD,MAyBO;AACLvB,SAAKQ,IAAL,CAAUC,cAAV,CAAyBC,UAAzB,CAAoCS,IAApC,CAAyC,8BACvC,+BAAc,WAAd,CADuC,EAEvC,wCACEC,mBADF,CAFuC,CAAzC;AAMD;AACF,C","file":"replaceJsxExpressionContainer.js","sourcesContent":["// @flow\nimport BabelTypes, {\n  binaryExpression,\n  Identifier,\n  isJSXExpressionContainer,\n  isStringLiteral,\n  jSXAttribute,\n  JSXAttribute,\n  jSXExpressionContainer,\n  jSXIdentifier\n} from 'babel-types';\nimport type {\n  HandleMissingStyleNameOptionType\n} from './types';\nimport conditionalClassMerge from './conditionalClassMerge';\nimport createObjectExpression from './createObjectExpression';\nimport optionsDefaults from './schemas/optionsDefaults';\n\ntype OptionsType = {|\n  handleMissingStyleName: HandleMissingStyleNameOptionType\n|};\n\nexport default (\n  t: BabelTypes,\n  // eslint-disable-next-line flowtype/no-weak-types\n  path: Object,\n  styleNameAttribute: JSXAttribute,\n  importedHelperIndentifier: Identifier,\n  styleModuleImportMapIdentifier: Identifier,\n  options: OptionsType\n): void => {\n  const expressionContainerValue = styleNameAttribute.value;\n  const classNameAttribute = path.node.openingElement.attributes\n    .find((attribute) => {\n      return typeof attribute.name !== 'undefined' && attribute.name.name === 'className';\n    });\n\n  if (classNameAttribute) {\n    path.node.openingElement.attributes.splice(path.node.openingElement.attributes.indexOf(classNameAttribute), 1);\n  }\n\n  path.node.openingElement.attributes.splice(path.node.openingElement.attributes.indexOf(styleNameAttribute), 1);\n\n  const args = [\n    expressionContainerValue.expression,\n    styleModuleImportMapIdentifier\n  ];\n\n  // Only provide options argument if the options are something other than default\n  // This helps save a few bits in the generated user code\n  if (options.handleMissingStyleName !== optionsDefaults.handleMissingStyleName) {\n    args.push(createObjectExpression(t, options));\n  }\n\n  const styleNameExpression = t.callExpression(\n    importedHelperIndentifier,\n    args\n  );\n\n  if (classNameAttribute) {\n    if (isStringLiteral(classNameAttribute.value)) {\n      path.node.openingElement.attributes.push(jSXAttribute(\n        jSXIdentifier('className'),\n        jSXExpressionContainer(\n          binaryExpression(\n            '+',\n            t.stringLiteral(classNameAttribute.value.value + ' '),\n            styleNameExpression\n          )\n        )\n      ));\n    } else if (isJSXExpressionContainer(classNameAttribute.value)) {\n      path.node.openingElement.attributes.push(jSXAttribute(\n        jSXIdentifier('className'),\n        jSXExpressionContainer(\n          conditionalClassMerge(\n            classNameAttribute.value.expression,\n            styleNameExpression\n          )\n        )\n      ));\n    } else {\n      throw new Error('Unexpected attribute value.');\n    }\n  } else {\n    path.node.openingElement.attributes.push(jSXAttribute(\n      jSXIdentifier('className'),\n      jSXExpressionContainer(\n        styleNameExpression\n      )\n    ));\n  }\n};\n"]}