{"version":3,"sources":["../src/getClassName.js"],"names":["DEFAULT_HANDLE_MISSING_STYLENAME_OPTION","isNamespacedStyleName","styleName","indexOf","getClassNameForNamespacedStyleName","styleModuleImportMap","handleMissingStyleNameOption","styleNameParts","split","importName","moduleName","handleMissingStyleName","Error","console","warn","styleNameValue","options","styleModuleImportMapKeys","Object","keys","filter","map","includedStyleModuleImportMapKeys","x","shouldBeIncluded","satisfiesInclude","match","RegExp","include","satisfiesExclude","exclude","length","styleModuleMap","className","join"],"mappings":";;;;;;;AAQA,MAAMA,0CAA0C,OAAhD;;AAEA,MAAMC,wBAAyBC,SAAD,IAAgC;AAC5D,SAAOA,UAAUC,OAAV,CAAkB,GAAlB,MAA2B,CAAC,CAAnC;AACD,CAFD;;AAIA,MAAMC,qCAAqC,CACzCF,SADyC,EAEzCG,oBAFyC,EAGzCC,4BAHyC,KAI7B;AACZ;AACA;AACA;AACA,QAAMC,iBAAiBL,UAAUM,KAAV,CAAgB,GAAhB,CAAvB;AACA,QAAMC,aAAaF,eAAe,CAAf,CAAnB;AACA,QAAMG,aAAaH,eAAe,CAAf,CAAnB;AACA,QAAMI,yBAAyBL,gCAC7BN,uCADF;;AAGA,MAAI,CAACU,UAAL,EAAiB;AACf,QAAIC,2BAA2B,OAA/B,EAAwC;AACtC,YAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;AACD,KAFD,MAEO,IAAID,2BAA2B,MAA/B,EAAuC;AAC5C;AACAE,cAAQC,IAAR,CAAa,qBAAb;AACD,KAHM,MAGA;AACL,aAAO,IAAP;AACD;AACF;;AAED,MAAI,CAACT,qBAAqBI,UAArB,CAAL,EAAuC;AACrC,QAAIE,2BAA2B,OAA/B,EAAwC;AACtC,YAAM,IAAIC,KAAJ,CAAU,mCAAV,CAAN;AACD,KAFD,MAEO,IAAID,2BAA2B,MAA/B,EAAuC;AAC5C;AACAE,cAAQC,IAAR,CAAa,mCAAb;AACD,KAHM,MAGA;AACL,aAAO,IAAP;AACD;AACF;;AAED,MAAI,CAACT,qBAAqBI,UAArB,EAAiCC,UAAjC,CAAL,EAAmD;AACjD,QAAIC,2BAA2B,OAA/B,EAAwC;AACtC,YAAM,IAAIC,KAAJ,CAAU,4BAAV,CAAN;AACD,KAFD,MAEO,IAAID,2BAA2B,MAA/B,EAAuC;AAC5C;AACAE,cAAQC,IAAR,CAAa,4BAAb;AACD,KAHM,MAGA;AACL,aAAO,IAAP;AACD;AACF;;AAED,SAAOT,qBAAqBI,UAArB,EAAiCC,UAAjC,CAAP;AACD,CAhDD;;kBAsDe,CAACK,cAAD,EAAyBV,oBAAzB,EAAyEW,OAAzE,KAA2G;AACxH,QAAMC,2BAA2BC,OAAOC,IAAP,CAAYd,oBAAZ,CAAjC;;AAEA,QAAMM,yBAAyBK,WAAWA,QAAQL,sBAAnB,IAC7BX,uCADF;;AAGA,SAAOe,eACJP,KADI,CACE,GADF,EAEJY,MAFI,CAEIlB,SAAD,IAAe;AACrB,WAAOA,SAAP;AACD,GAJI,EAKJmB,GALI,CAKCnB,SAAD,IAAe;AAClB,UAAMoB,mCAAmCL,yBAAyBG,MAAzB,CAAiCG,CAAD,IAAO;AAC9E,UAAIC,mBAAmB,IAAvB;;AAEA,YAAMC,mBAAmBF,EAAEG,KAAF,CAAQ,IAAIC,MAAJ,CAAWX,QAAQY,OAAnB,CAAR,CAAzB;AACA,UAAIZ,QAAQY,OAAR,IAAmB,CAACH,gBAAxB,EAA0CD,mBAAmB,KAAnB;;AAE1C,YAAMK,mBAAmBN,EAAEG,KAAF,CAAQ,IAAIC,MAAJ,CAAWX,QAAQc,OAAnB,CAAR,CAAzB;AACA,UAAId,QAAQc,OAAR,IAAmBD,gBAAvB,EAAyCL,mBAAmB,KAAnB;;AAEzC,aAAOA,gBAAP;AACD,KAVwC,CAAzC;;AAYA,QAAIvB,sBAAsBC,SAAtB,CAAJ,EAAsC;AACpC,aAAOE,mCAAmCF,SAAnC,EAA8CG,oBAA9C,EAAoEM,sBAApE,CAAP;AACD;;AAED,QAAIW,iCAAiCS,MAAjC,KAA4C,CAAhD,EAAmD;AACjD,YAAM,IAAInB,KAAJ,CAAU,2EAAV,CAAN;AACD;;AAED,QAAIU,iCAAiCS,MAAjC,GAA0C,CAA9C,EAAiD;AAC/C,YAAM,IAAInB,KAAJ,CAAU,uEAAV,CAAN;AACD;;AAED,UAAMoB,iBAAqC3B,qBAAqBY,yBAAyB,CAAzB,CAArB,CAA3C;;AAEA,QAAI,CAACe,eAAe9B,SAAf,CAAL,EAAgC;AAC9B,UAAIS,2BAA2B,OAA/B,EAAwC;AACtC,cAAM,IAAIC,KAAJ,CAAU,uCAAuCV,SAAvC,GAAmD,KAA7D,CAAN;AACD;AACD,UAAIS,2BAA2B,MAA/B,EAAuC;AACrC;AACAE,gBAAQC,IAAR,CAAa,uCAAuCZ,SAAvC,GAAmD,KAAhE;AACD;AACF;;AAED,WAAO8B,eAAe9B,SAAf,CAAP;AACD,GA3CI,EA4CJkB,MA5CI,CA4CIa,SAAD,IAAe;AACrB;AACA,WAAOA,SAAP;AACD,GA/CI,EAgDJC,IAhDI,CAgDC,GAhDD,CAAP;AAiDD,C","file":"getClassName.js","sourcesContent":["// @flow\n\nimport type {\n  StyleModuleMapType,\n  StyleModuleImportMapType,\n  HandleMissingStyleNameOptionType\n} from './types';\n\nconst DEFAULT_HANDLE_MISSING_STYLENAME_OPTION = 'throw';\n\nconst isNamespacedStyleName = (styleName: string): boolean => {\n  return styleName.indexOf('.') !== -1;\n};\n\nconst getClassNameForNamespacedStyleName = (\n  styleName: string,\n  styleModuleImportMap: StyleModuleImportMapType,\n  handleMissingStyleNameOption?: HandleMissingStyleNameOptionType\n): ?string => {\n  // Note:\n  // Do not use the desctructing syntax with Babel.\n  // Desctructing adds _slicedToArray helper.\n  const styleNameParts = styleName.split('.');\n  const importName = styleNameParts[0];\n  const moduleName = styleNameParts[1];\n  const handleMissingStyleName = handleMissingStyleNameOption ||\n    DEFAULT_HANDLE_MISSING_STYLENAME_OPTION;\n\n  if (!moduleName) {\n    if (handleMissingStyleName === 'throw') {\n      throw new Error('Invalid style name.');\n    } else if (handleMissingStyleName === 'warn') {\n      // eslint-disable-next-line no-console\n      console.warn('Invalid style name.');\n    } else {\n      return null;\n    }\n  }\n\n  if (!styleModuleImportMap[importName]) {\n    if (handleMissingStyleName === 'throw') {\n      throw new Error('CSS module import does not exist.');\n    } else if (handleMissingStyleName === 'warn') {\n      // eslint-disable-next-line no-console\n      console.warn('CSS module import does not exist.');\n    } else {\n      return null;\n    }\n  }\n\n  if (!styleModuleImportMap[importName][moduleName]) {\n    if (handleMissingStyleName === 'throw') {\n      throw new Error('CSS module does not exist.');\n    } else if (handleMissingStyleName === 'warn') {\n      // eslint-disable-next-line no-console\n      console.warn('CSS module does not exist.');\n    } else {\n      return null;\n    }\n  }\n\n  return styleModuleImportMap[importName][moduleName];\n};\n\ntype OptionsType = {|\n  handleMissingStyleName: HandleMissingStyleNameOptionType\n|};\n\nexport default (styleNameValue: string, styleModuleImportMap: StyleModuleImportMapType, options?: OptionsType): string => {\n  const styleModuleImportMapKeys = Object.keys(styleModuleImportMap);\n\n  const handleMissingStyleName = options && options.handleMissingStyleName ||\n    DEFAULT_HANDLE_MISSING_STYLENAME_OPTION;\n\n  return styleNameValue\n    .split(' ')\n    .filter((styleName) => {\n      return styleName;\n    })\n    .map((styleName) => {\n      const includedStyleModuleImportMapKeys = styleModuleImportMapKeys.filter((x) => {\n        let shouldBeIncluded = true;\n\n        const satisfiesInclude = x.match(new RegExp(options.include));\n        if (options.include && !satisfiesInclude) shouldBeIncluded = false;\n\n        const satisfiesExclude = x.match(new RegExp(options.exclude));\n        if (options.exclude && satisfiesExclude) shouldBeIncluded = false;\n\n        return shouldBeIncluded;\n      });\n\n      if (isNamespacedStyleName(styleName)) {\n        return getClassNameForNamespacedStyleName(styleName, styleModuleImportMap, handleMissingStyleName);\n      }\n\n      if (includedStyleModuleImportMapKeys.length === 0) {\n        throw new Error('Cannot use styleName attribute without importing at least one stylesheet.');\n      }\n\n      if (includedStyleModuleImportMapKeys.length > 1) {\n        throw new Error('Cannot use anonymous style name with more than one stylesheet import.');\n      }\n\n      const styleModuleMap: StyleModuleMapType = styleModuleImportMap[styleModuleImportMapKeys[0]];\n\n      if (!styleModuleMap[styleName]) {\n        if (handleMissingStyleName === 'throw') {\n          throw new Error('Could not resolve the styleName \\'' + styleName + '\\'.');\n        }\n        if (handleMissingStyleName === 'warn') {\n          // eslint-disable-next-line no-console\n          console.warn('Could not resolve the styleName \\'' + styleName + '\\'.');\n        }\n      }\n\n      return styleModuleMap[styleName];\n    })\n    .filter((className) => {\n      // Remove any styles which could not be found (if handleMissingStyleName === 'ignore')\n      return className;\n    })\n    .join(' ');\n};\n"]}