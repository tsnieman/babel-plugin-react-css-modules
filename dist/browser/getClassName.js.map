{"version":3,"sources":["../../src/getClassName.js"],"names":[],"mappings":"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","file":"getClassName.js","sourcesContent":["// @flow\n\nimport type {\n  StyleModuleMapType,\n  StyleModuleImportMapType,\n  HandleMissingStyleNameOptionType\n} from './types';\n\nconst DEFAULT_HANDLE_MISSING_STYLENAME_OPTION = 'throw';\n\nconst isNamespacedStyleName = (styleName: string): boolean => {\n  return styleName.indexOf('.') !== -1;\n};\n\nconst getClassNameForNamespacedStyleName = (\n  styleName: string,\n  styleModuleImportMap: StyleModuleImportMapType,\n  handleMissingStyleNameOption?: HandleMissingStyleNameOptionType\n): ?string => {\n  // Note:\n  // Do not use the desctructing syntax with Babel.\n  // Desctructing adds _slicedToArray helper.\n  const styleNameParts = styleName.split('.');\n  const importName = styleNameParts[0];\n  const moduleName = styleNameParts[1];\n  const handleMissingStyleName = handleMissingStyleNameOption ||\n    DEFAULT_HANDLE_MISSING_STYLENAME_OPTION;\n\n  if (!moduleName) {\n    if (handleMissingStyleName === 'throw') {\n      throw new Error('Invalid style name.');\n    } else if (handleMissingStyleName === 'warn') {\n      // eslint-disable-next-line no-console\n      console.warn('Invalid style name.');\n    } else {\n      return null;\n    }\n  }\n\n  if (!styleModuleImportMap[importName]) {\n    if (handleMissingStyleName === 'throw') {\n      throw new Error('CSS module import does not exist.');\n    } else if (handleMissingStyleName === 'warn') {\n      // eslint-disable-next-line no-console\n      console.warn('CSS module import does not exist.');\n    } else {\n      return null;\n    }\n  }\n\n  if (!styleModuleImportMap[importName][moduleName]) {\n    if (handleMissingStyleName === 'throw') {\n      throw new Error('CSS module does not exist.');\n    } else if (handleMissingStyleName === 'warn') {\n      // eslint-disable-next-line no-console\n      console.warn('CSS module does not exist.');\n    } else {\n      return null;\n    }\n  }\n\n  return styleModuleImportMap[importName][moduleName];\n};\n\ntype OptionsType = {|\n  handleMissingStyleName: HandleMissingStyleNameOptionType\n|};\n\nexport default (styleNameValue: string, styleModuleImportMap: StyleModuleImportMapType, options?: OptionsType): string => {\n  const styleModuleImportMapKeys = Object.keys(styleModuleImportMap);\n\n  const handleMissingStyleName = options && options.handleMissingStyleName ||\n    DEFAULT_HANDLE_MISSING_STYLENAME_OPTION;\n\n  return styleNameValue\n    .split(' ')\n    .filter((styleName) => {\n      return styleName;\n    })\n    .map((styleName) => {\n      const includedStyleModuleImportMapKeys = styleModuleImportMapKeys.filter((x) => {\n        let shouldBeIncluded = true;\n\n        const satisfiesInclude = x.match(new RegExp(options.include));\n        if (options.include && !satisfiesInclude) shouldBeIncluded = false;\n\n        const satisfiesExclude = x.match(new RegExp(options.exclude));\n        if (options.exclude && satisfiesExclude) shouldBeIncluded = false;\n\n        return shouldBeIncluded;\n      });\n\n      if (isNamespacedStyleName(styleName)) {\n        return getClassNameForNamespacedStyleName(styleName, styleModuleImportMap, handleMissingStyleName);\n      }\n\n      if (includedStyleModuleImportMapKeys.length === 0) {\n        throw new Error('Cannot use styleName attribute without importing at least one stylesheet.');\n      }\n\n      if (includedStyleModuleImportMapKeys.length > 1) {\n        throw new Error('Cannot use anonymous style name with more than one stylesheet import.');\n      }\n\n      const styleModuleMap: StyleModuleMapType = styleModuleImportMap[styleModuleImportMapKeys[0]];\n\n      if (!styleModuleMap[styleName]) {\n        if (handleMissingStyleName === 'throw') {\n          throw new Error('Could not resolve the styleName \\'' + styleName + '\\'.');\n        }\n        if (handleMissingStyleName === 'warn') {\n          // eslint-disable-next-line no-console\n          console.warn('Could not resolve the styleName \\'' + styleName + '\\'.');\n        }\n      }\n\n      return styleModuleMap[styleName];\n    })\n    .filter((className) => {\n      // Remove any styles which could not be found (if handleMissingStyleName === 'ignore')\n      return className;\n    })\n    .join(' ');\n};\n"]}